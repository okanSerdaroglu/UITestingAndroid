
** Before start open an emulator and close animations in developer options.
   Settings -> System -> Developer Options -> Drawing
     - Window animation scale (off)
     - Transaction animation scale (off)
     - Animation duration scale (off)

** You can define an activityScenario in 2 different ways

   First way :
       @get: Rule
       val activityRule = ActivityScenarioRule(SecondaryActivity::class.java)

   Second way for in each test :
        val activityScenario = ActivityScenario.launch(MainActivity::class.java)

** @RunWith(Suite::class)
   @Suite.SuiteClasses(
       MainActivityTest::class,
       SecondaryActivityTest::class
   ) means that run MainActivityTest and SecondaryActivityTest classes together



** Firebase Test Lab : (for free, you can test max 2 device, 5 tests daily)

    - Create project on firebase, add google-gson file inside app directory.

    - Edit configuration -> Android Instrumented Tests -> Create new -> Follow this steps -> firebase_step1
    firebase_step1 -> Click (Matrix configuration ... ) -> firebase_step2 -> firebase_step3 ->
    firebase_step4 -> firebase_step5 -> apply -> ok

    - Select created new configuration then run it.
    - Look at Firebase Test Lab in firebase console

   ------------------------

    There are a couple of different matchers that you can use when
    you are building a custom test
    ** Matchers
    ** Bounded Matchers

   --------------------------

   * Espresso Idling Resource (Testing background work) : An idling resource represents
   an asynchronous operation whose results affect subsequent operations in a UI test. By registering
   idling resources with Espresso, you can validate these asynchronous operations more reliably
   when testing your app.

   The following list describes several example implementations of idling resources that
   you can integrate into your app:

   - CountingIdlingResource : Maintains a counter of active tasks. When the counter is zero,
   the associated resource is considered idle. This functionality closely resembles that of a Semaphore.
   In most cases, this implementation is sufficient for managing your app's asynchronous work during testing.
   - UriIdlingResource
   - IdlingThreadPoolExecutor
   - IdlingScheduledThreadPoolExecutor

